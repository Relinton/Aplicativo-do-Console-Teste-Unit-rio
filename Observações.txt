
No xUnit precisamos decorar os métodos de teste com o atributo [Fact]
Com o XUnit para tornar um método comum em método de testes basta adicionar [Fact] ou [Theory]
Para testes sem parâmetros deve-se usar [Fact], para testes como parâmetros utiliza-se o [Theory].
O atributo [Theory] indica um teste parametrizado que é verdadeiro para um subconjunto de dados.
Esses dados podem ser fornecidos de várias maneiras, mas o mais comum é com um atributo [InlineData].
Assim este atributo permite executar um método de teste várias vezes passando diferentes valores a cada vez como parâmetros.
Podemos ainda desativar um teste por qualquer motivo. Para isso basta definir a propriedade Skip no atributo Fact com o motivo que você desativou o teste (o motivo não é exibido).

 [Fact(Skip = "Teste ainda não disponível")]
        public void Teste()
        {
        }

        Á medida que o número de seus testes aumenta, você pode organizá-los em grupos para que poder executar os testes juntos. O atributo [Trait] permite organizar os testes em grupos,
        criando nomes de categoria e atribuindo valores a eles.

          [Fact(DisplayName = "Teste Numero 2")]
        [Trait("Calculo", "Somar")]
        public void Somar_DoisNumeros_RetornaNumero()
        { }

        Ao escrever testes unitários, em geral seguimos o princípio AAA :  Act, Arrange e Assert (Organizar, Agir e Assertir):

        Arrange - É aqui que você normalmente prepara tudo para o teste, em outras palavras, prepara a cena para testar (criar os objetos e configurá-los conforme necessário)

Act - É onde o método que estamos testando será executado;

Assert - Esta é a parte final do teste em que comparamos o que esperamos que aconteça com o resultado real da execução do método de teste;





